parameters:
- name: image_type
  displayName: Build Agent Image
  type: string
  default: windows2019
  values:
  - windows2019
  - ubuntu2004
- name: variable_group
  displayName: Variable Group
  type: string
  default: BuildAgents
- name: agent_pool
  displayName: Agent Pool
  type: string
  default: CI Windows2019

trigger: none

variables:
  - group: ${{ parameters.variable_group }}

jobs:
- job: imagegeneration
  displayName: Image Generation (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool: 
    name: ${{ parameters.agent_pool }}

  steps:    
  - script: |
      git clone https://github.com/actions/virtual-environments.git
    displayName: 'Clone the GitHub repository'

  - task: PowerShell@2
    name: setVars
    displayName: 'Set image template variables'
    inputs:
      targetType: 'inline'
      script: |
        $ResourcesNamePrefix = "$(Build.BuildId)"
        $ImageType = "${{ parameters.image_type }}"
        $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "linux" } else { "win" }
        $OsType = if ($ImageType.StartsWith("ubuntu")) { "Linux" } else { "Windows" }
        $TemplateDirectoryPath = Join-Path (Join-Path "virtual-environments" "images") $TemplateDirectoryName | Resolve-Path
        $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
        $ImageReadmeNameConcat = "${{ parameters.image_type }}-README.md"
        $ImageReadmeName = $ImageReadmeNameConcat.Substring(0,1).ToUpper()+$ImageReadmeNameConcat.Substring(1)
        Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
        Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"
        Write-Host "##vso[task.setvariable variable=OsType;isOutput=true;]$OsType"
        Write-Host "##vso[task.setvariable variable=ImageType;isOutput=true;]$ImageType"
        Write-Host "##vso[task.setvariable variable=ResourcesNamePrefix;isOutput=true;]$ResourcesNamePrefix"
        Write-Host "##vso[task.setvariable variable=ImageReadmeName;isOutput=true;]$ImageReadmeName"
   
  - task: PowerShell@2
    name: buildVm
    displayName: 'Build VM'
    inputs:
      targetType: filePath
      filePath: ./scripts/build-image.ps1
      arguments: -ResourcesNamePrefix $(setVars.ResourcesNamePrefix) `
                        -ClientId $(CLIENT_ID) `
                        -ClientSecret $(CLIENT_SECRET) `
                        -TemplatePath $(TemplatePath) `
                        -ResourceGroup $(AZURE_RESOURCE_GROUP) `
                        -StorageAccount $(AZURE_STORAGE_ACCOUNT) `
                        -SubscriptionId $(AZURE_SUBSCRIPTION) `
                        -TenantId $(AZURE_TENANT) `
                        -Location $(AZURE_LOCATION) `
                        -GitHubFeedToken $(GITHUB_TOKEN)
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt

  - task: PowerShell@2
    displayName: 'Output Readme file content'
    inputs:
      targetType: 'inline'
      script: |
        Get-Content -Path (Join-Path "$(TemplateDirectoryPath)" "$(setVars.ImageReadmeName)")
    enabled: false

  - task: PowerShell@2
    displayName: 'Print provisioners duration'
    inputs:
      targetType: 'filePath'
      filePath: ./scripts/measure-provisioners-duration.ps1
      arguments: -PackerLogPath "$(Build.ArtifactStagingDirectory)/packer-log.txt" `
                        -PrefixToPathTrim "$(TemplateDirectoryPath)" `
                        -PrintTopNLongest 25

  - task: PowerShell@2
    displayName: 'Clean up resources'
    condition: always()
    inputs:
      targetType: filePath
      filePath: ./scripts/cleanup.ps1
      arguments: -ResourcesNamePrefix $(setVars.ResourcesNamePrefix) `
                     -ClientId $(CLIENT_ID) `
                     -ClientSecret $(CLIENT_SECRET) `
                     -Image $(setVars.ImageType) `
                     -SubscriptionId $(AZURE_SUBSCRIPTION) `
                     -TenantId $(AZURE_TENANT) `
                     -StorageAccount $(AZURE_STORAGE_ACCOUNT)

- job: managedimagegeneration
  displayName: Managed Image Generation (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool: 
    name: ${{ parameters.agent_pool }}
  dependsOn: imagegeneration
  variables:
  - name: OsType
    value: $[ dependencies.imagegeneration.outputs['setVars.OsType'] ]
  - name: ImageType
    value: $[ dependencies.imagegeneration.outputs['setVars.ImageType'] ]
  - name: ResourcesNamePrefix
    value: $[ dependencies.imagegeneration.outputs['setVars.ResourcesNamePrefix'] ]
  - name: OSDiskUri
    value: $[ dependencies.imagegeneration.outputs['buildVm.OSDiskUri'] ]

  steps:
  - task: PowerShell@2
    displayName: 'Create Azure Managed Image'
    name: createmanagedimage
    inputs:
      targetType: filePath
      filePath: ./scripts/create-managedimage.ps1
      arguments: -ResourcesNamePrefix $(ResourcesNamePrefix) `
                        -ClientId $(CLIENT_ID) `
                        -ClientSecret $(CLIENT_SECRET) `
                        -ResourceGroup $(AZURE_RESOURCE_GROUP) `
                        -StorageAccount $(AZURE_STORAGE_ACCOUNT) `
                        -SubscriptionId $(AZURE_SUBSCRIPTION) `
                        -TenantId $(AZURE_TENANT) `
                        -Location $(AZURE_LOCATION) `
                        -ImageType $(ImageType) `
                        -OsVhdUri $(OSDiskUri) `
                        -OsType $(OsType)

- job: updatevmss
  displayName: Update Virtual Machine Scale Set (${{ parameters.image_type }})
  timeoutInMinutes: 600
  cancelTimeoutInMinutes: 30
  pool: 
    name: ${{ parameters.agent_pool }}
  dependsOn: managedimagegeneration
  variables:
  - name: ManagedImageId
    value: $[ dependencies.managedimagegeneration.outputs['createmanagedimage.ManagedImageId'] ]
  - ${{ if eq(parameters.image_type, 'windows2019') }}:
    - name: VmssName
      value: $[variables.VMSS_Windows2019]
  - ${{ if eq(parameters.image_type, 'ubuntu2004') }}:
    - name: VmssName
      value: $[variables.VMSS_Ubuntu2004]

  steps:
  - task: PowerShell@2
    displayName: 'Update Virtual Machine Scale Set'
    inputs:
      targetType: filePath
      filePath: ./scripts/update-vmss.ps1
      arguments: -ClientId $(CLIENT_ID) `
                        -ClientSecret $(CLIENT_SECRET) `
                        -ResourceGroup $(AZURE_AGENTS_RESOURCE_GROUP) `
                        -SubscriptionId $(AZURE_SUBSCRIPTION) `
                        -TenantId $(AZURE_TENANT) `
                        -VmssName $(VmssName) `
                        -ManagedImageId $(ManagedImageId)